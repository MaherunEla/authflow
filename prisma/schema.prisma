generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  role               Role                 @default(USER)
  twoFaEnabled       Boolean              @default(false)
  twoFaSecret        String?
  createdAt          DateTime             @default(now())
  status             UserStatus           @default(ACTIVE)
  statusUpdatedAt    DateTime?
  suspendReason      String?
  warningReason      String?
  lastLoginAt        DateTime?
  lastLoginIp        String?
  updatedAt          DateTime             @updatedAt
  AdminActionLog     AdminActionLog[]
  devices            Device[]
  loginAttempts      LoginAttempt[]
  sessions           Session[]
  SuspiciousActivity SuspiciousActivity[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String?
  ip        String
  userAgent String
  location  String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  device    Device?  @relation(fields: [deviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Device {
  id          String    @id @default(cuid())
  userId      String
  fingerprint String
  name        String?
  ip          String
  location    String?
  trusted     Boolean   @default(false)
  lastUsedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  userAgent   String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sesssions   Session[]
}

model LoginAttempt {
  id        String      @id @default(cuid())
  userId    String?
  email     String
  reason    String?
  ip        String
  location  String?
  userAgent String?
  createdAt DateTime    @default(now())
  success   LoginStatus
  user      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SuspiciousActivity {
  id          String   @id @default(cuid())
  userId      String
  type        String
  ip          String
  location    String?
  userAgent   String?
  createdAt   DateTime @default(now())
  actionTaken String?
  user        User     @relation(fields: [userId], references: [id])
}

model AdminActionLog {
  id               String           @id @default(cuid())
  adminId          String
  actionTargetType ActionTargetType
  targetId         String
  actionType       AdminActionType
  notes            String?
  createdAt        DateTime         @default(now())
  admin            User             @relation(fields: [adminId], references: [id])
}

enum LoginStatus {
  SUCCESS
  FAILURE
}

enum Role {
  USER
  ADMIN
  GUEST
}

enum UserStatus {
  ACTIVE
  WARNED
  SUSPENDED
  LOCKED
}

enum ActionTargetType {
  FAILED_LOGIN
  SUSPICIOUS_ACTIVITY
  USER_MANAGEMENT
  AUTHENTICATION
}

enum AdminActionType {
  LOCK_ACCOUNT
  UNLOCK_ACCOUNT
  FORCE_LOGOUT
  SEND_ALERT
  WARN_USER
  SUSPEND_USER
  TWOFA_RESET
  UPDATE_USER_STATUS
}
